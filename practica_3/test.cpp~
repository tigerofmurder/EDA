#include <bits/stdc++.h>
#include "CImg.h"

using namespace std;
using namespace cimg_library;

string int_to_bin(int n){
    bitset<8> bin_x(n);
    return bin_x.to_string();
}

int bin_to_int(int n){
    string bin_string = to_string(n);
    int number = stoi(bin_string, 0, 2);
	return number;
}


class Node{
    public:
        int RED,GREEN,BLUE,contador;
        Node *pSon[8];
        bool status;
    public:
        Node(int r=0,int g=0, int b=0,int cont=0){
            RED = r;
            GREEN = g;
            BLUE = b;
            contador = cont;
            status = true;
            pSon[0]=pSon[1]=pSon[2]=pSon[3]=pSon[4]=pSon[5]=pSon[6]=pSon[7]=NULL;
        }
};
class Octree{
    private:
        Node *root;
    public:
        Octree(){
            root = new Node (0,0,0);
        };

        void insert(Node *temp,vector<int> positions,int r,int g, int b){
            if(positions.empty()) return;
            int elemt= positions.front();
            if(!temp->pSon[elemt]){
                temp->pSon[elemt]= new Node (r,g,b);
            }
            else{
                temp->pSon[elemt]->RED+=r;
                temp->pSon[elemt]->GREEN+=g;
                temp->pSon[elemt]->BLUE+=b;
                temp->pSon[elemt]->contador+=1;
                }
            positions.erase(positions.begin());
            insert(temp->pSon[elemt],positions,r,g,b);
        }

        vector<int> index(int r,int g,int b){
            string R = int_to_bin(r);
            string G = int_to_bin(g);
            string B = int_to_bin(b);
            vector<int> salida;
            for(int i=0;i<8;i++){
                string elemeto_aux;
                elemeto_aux.push_back(R[i]); elemeto_aux.push_back(G[i]); elemeto_aux.push_back(B[i]);
                salida.push_back(bin_to_int(stoi(elemeto_aux)));
            }
            insert(root,salida,r,g,b);
            return salida;
        }
};


int main()
{
    Octree Raiz;
    CImg<int> file("rainbow.png");
    for(int i=0;i<file.width();i++){
        for(int j=0;j<file.height();j++){
            cout<<"("<<i<<","<<j<<"): ";
            int r = file(i,j,0,0);
            int g = file(i,j,0,1);
            int b = file(i,j,0,2);
            cout<<r<<" "<<g<<" "<<b<<" : ";
            vector<int> aa=Raiz.index(r,g,b);
            for (auto it:aa)
                cout<<it<<" ";
            cout<<endl;
        }
    }
    file.display();
    return 0;
}

